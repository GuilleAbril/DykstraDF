eq = eq,
I = Ir[,-1])
source('E:/4S/ProgramasGuillermo/stopCriteria.R')
source('E:/4S/ProgramasGuillermo/stopCriteria.R')
source('E:/4S/ProgramasGuillermo/DykstraSemiespacios.R')
source('E:/4S/ProgramasGuillermo/Dykstrabola.R')
source('E:/4S/ProgramasGuillermo/DykstraBolaSubespacios.R')
source('E:/4S/ProgramasGuillermo/DykstraProyecDF.R')
source('E:/4S/ProgramasGuillermo/pruebaPlot2D.R')
library(validate)##########
library(simputation)
data(retailers)
## Restricciones de la página 271(Jogen_loo), matricialmente serían:
a1r = -c(0,0,1,0,0,0,0,0,0,0)
a2r = -c(0,0,0,1,0,0,0,0,0,0)
a3r = -c(0,0,0,0,1,0,0,0,0,0)
a4r = -c(0,0,0,1,1,-1,0,0,0,0)
a5r = -c(0,0,0,0,0,1,0,-1,-1,0)
a6r = -c(0,0,0,0,0,0,0,1,0,0)
Ar = matrix(c(a1r, a2r, a3r, a4r, a5r, a6r), nrow = 6, ncol = length(a1r), byrow = TRUE)
br = rep(0,6)
# imputación sobre el DF original con la función impute_mf que usa vanderloo
#library(simputation)
retailers_imputed = impute_mf(retailers, . ~ .)
eq = c(rep('<=',3), '==', '==', '<=')
## Aplicamos ahora el algoritmo de Dykstra
#la función tiene que recibir un dataframe con valores numéricos
# en este caso la primera columna no nos interesa
# 1º cambiando todos los datos
#Wr = diag(length(df_imputRetail[1,][-1]))
# 2ºcambiando solo los imputados
Ir = is.na(DFr)# DF de TRUE o FALSE indicando si el dato ha sido imputado(TRUE) o no
retail_lineal = dykstra_DF(DF = df_imputRetail[,-1],
typeConstraints = "lineal",
A = Ar[,-1],
b = br,
eq = eq)
retail_linealI = dykstra_DF(DF = df_imputRetail[,-1],
typeConstraints = "lineal",
A = Ar[,-1],
b = br,
eq = eq,
I = Ir[,-1])
v <- validator(
staff >= 0
, turnover >= 0
, other.rev >= 0
, turnover + other.rev == total.rev
, total.rev - total.costs == profit
, total.costs >= 0
)
library(errorlocate)###########
# aquí identifica los datos del DF original que no cumplen las restricciones con el objeto validator
# y las sustituye por NA
d1 <- replace_errors(retailers,v)
miss <- is.na(d1)
# imputa los NA con un algoritmo de arbol de decisión
d2 <- impute_mf(d1, . ~ .)
d3 <- match_restrictions(d2, v, adjust=is.na(d1))
library(validate)
library(simputation)
library(errorlocate)
library(rspa)
v <- validator(
staff >= 0
, turnover >= 0
, other.rev >= 0
, turnover + other.rev == total.rev
, total.rev - total.costs == profit
, total.costs >= 0
)
# aquí identifica los datos del DF original que no cumplen las restricciones con el objeto validator
# y las sustituye por NA
d1 <- replace_errors(retailers,v)
miss <- is.na(d1)
# imputa los NA con un algoritmo de arbol de decisión
d2 <- impute_mf(d1, . ~ .)
d3 <- match_restrictions(d2, v, adjust=is.na(d1))
View(d2)
View(d3)
d4 <- match_restrictions(d2, v)
View(d4)
View(retail_lineal)
View(retail_lineal[["df_final"]])
retailers_lineal2 <- match_restrictions(retailers_imputed, v)
View(retail_lineal2)
View(retailers_lineal2)
head(retailers_lineal2)
head(retailers_lineal2,5)
retailers_lineal = dykstra_DF(DF = df_imputRetail[,-1],
typeConstraints = "lineal",
A = Ar[,-1],
b = br,
eq = eq)
retailers_lineal = dykstra_DF(DF = retailers_imputed[,-1],
typeConstraints = "lineal",
A = Ar[,-1],
b = br,
eq = eq)
retail_linealI = dykstra_DF(DF = retailers_imputed[,-1],
typeConstraints = "lineal",
A = Ar[,-1],
b = br,
eq = eq,
I = Ir[,-1])
head(retailers_lineal$df_final,5)
## Aplicamos ahora el algoritmo de Dykstra
#la función tiene que recibir un dataframe con valores numéricos
# en este caso la primera columna no nos interesa
# 1º cambiando todos los datos
#Wr = diag(length(df_imputRetail[1,][-1]))
# 2ºcambiando solo los imputados
Ir = is.na(retailers)# DF de TRUE o FALSE indicando si el dato ha sido imputado(TRUE) o no
retailers_linealI = dykstra_DF(DF = retailers_imputed[,-1],
typeConstraints = "lineal",
A = Ar[,-1],
b = br,
eq = eq,
I = Ir[,-1])
head(retailers_linealI$df_final,5)
#> head(retailers_lineal2,5)
#size incl.prob staff turnover    other.rev total.rev staff.costs total.costs     profit     vat
#1  sc0      0.02 75.00 1985.132 1.507917e+04 17064.301     12021.3    7967.150 9097.15048 3486.63
#2  sc3      0.14  9.00 1589.353 2.941280e+01  1618.765       131.0    1549.882   68.88240 1349.95
#3  sc3      0.14 22.64 6905.801 5.553284e-16  6905.799       324.0    6486.400  419.39950 5802.69
#4  sc3      0.14 18.87 3861.000 1.300000e+01  3874.000       290.0    3600.000  274.00000 3540.53
#5  sc3      0.14 20.73 5412.450 1.285298e+02  5540.980       314.0    5499.490   41.49006 4371.47
retailers_linealIRspa <- match_restrictions(retailers_imputed, v, Ir)
warnings
warnings()
head(retailers_linealIRspa)
#> head(retailers_lineal2,5)
#size incl.prob staff turnover    other.rev total.rev staff.costs total.costs     profit     vat
#1  sc0      0.02 75.00 1985.132 1.507917e+04 17064.301     12021.3    7967.150 9097.15048 3486.63
#2  sc3      0.14  9.00 1589.353 2.941280e+01  1618.765       131.0    1549.882   68.88240 1349.95
#3  sc3      0.14 22.64 6905.801 5.553284e-16  6905.799       324.0    6486.400  419.39950 5802.69
#4  sc3      0.14 18.87 3861.000 1.300000e+01  3874.000       290.0    3600.000  274.00000 3540.53
#5  sc3      0.14 20.73 5412.450 1.285298e+02  5540.980       314.0    5499.490   41.49006 4371.47
retailers_linealIRspa <- match_restrictions(retailers_imputed, v, adjust=Ir)
warnins()
warnings()
head(retailers_linealIRspa)
library(validate)
library(simputation)
library(errorlocate)
library(rspa)
# siguiendo la notación de Vanderloo
d1 <- replace_errors(retailers,v)
miss <- is.na(d1)
# imputa los NA con un algoritmo de arbol de decisión
d2 <- impute_mf(d1, . ~ .)
head(d2)
miss
head(miss)
library(validate)
library(simputation)
library(errorlocate)
library(rspa)
# siguiendo la notación de Vanderloo
d1 <- replace_errors(retailers,v)
#miss <- is.na(d1)
# imputa los NA con un algoritmo de arbol de decisión
d2 <- impute_mf(d1, . ~ .)
d3 <- match_restrictions(d2, v)
d4 <- match_restrictions(d2, v, adjust=is.na(d1))
d_lineal = dykstra_DF(DF = d2[,-1],
typeConstraints = "lineal",
A = Ar[,-1],
b = br,
eq = eq)
d_linealI = dykstra_DF(DF = d2[,-1],
typeConstraints = "lineal",
A = Ar[,-1],
b = br,
eq = eq,
I = is.na(d1)[,-1])
head(d3)
head(d_lineal)
head(d3)
head(d_lineal$df_final)
head(d4)
head(d_linealI$df_final)
miss[1,]
View(retailers_linealI)
row.names(retail_linealI$df_check)
!(row.names(retail_linealI$df_check) %in% row.names(retail_linealI$df_check))
which(!(row.names(retail_linealI$df_check) %in% row.names(retail_linealI$df_check)))
which(!(row.names(retail_linealI$df_check) %in% row.names(retail_linealI$df_check)))
row.names(retail_linealI$df_check)
which(!(row.names(retail_linealI$df_check) %in% row.names(retail_linealI$df_proyec)))
row.names(retailers)
retailers[,"vat"]
retailers[,"profit"]
retailers[,c("profit","vat")]
retailers[,c("vat","profit")]
colMeans(retailers[,c("vat","profit")])
colMeans(retailers_imputed[,c("vat","profit")])
as.matrix(colMeans(retailers_imputed[,c("vat","profit")]))
matrix(colMeans(retailers_imputed[,c("vat","profit")]),byrow = T)
matrix(colMeans(retailers_imputed[,c("vat","profit")]))
matrix(colMeans(retailers_imputed[,c("vat","profit")]),bycol = T)
matrix(colMeans(retailers_imputed[,c("vat","profit")]),byrow = F)
matrix(colMeans(retailers_imputed[,c("vat","profit")]),byrow = T)
colMeans(retailers_imputed[,c("vat","profit")])
retailers_ball  = dykstra_DF(retailers_imputed, typeConstraints = "ball",
r = 10,
centers =  colMeans(retailers_imputed[,c("vat","profit")]))
retailers_ball  = dykstra_DF(retailers_imputedretailers_imputed[,c("vat","profit")],
typeConstraints = "ball",
r = 10,
centers =  colMeans(retailers_imputed[,c("vat","profit")]))
retailers_ball  = dykstra_DF(retailers_imputed[,c("vat","profit")],
typeConstraints = "ball",
r = 10,
centers =  colMeans(retailers_imputed[,c("vat","profit")]))
colMeans(retailers_imputed[,c("vat","profit")])
matrix(colMeans(retailers_imputed[,c("vat","profit")]))
t(matrix(colMeans(retailers_imputed[,c("vat","profit")])))
colMeans(retailers_imputed[,c("vat","profit")])
t(colMeans(retailers_imputed[,c("vat","profit")]))
retailers_ball  = dykstra_DF(retailers_imputed[,c("vat","profit")],
typeConstraints = "ball",
r = 10,
centers =  t(colMeans(retailers_imputed[,c("vat","profit")])))
retailers_ball$df_proyec
View(retailers_ball)
View(retailers_ball[["df_original"]])
View(retailers_ball[["df_final"]])
retailers_ball  = dykstra_DF(retailers_imputed[,c("vat","profit")],
typeConstraints = "ball",
r = 1,
centers =  t(colMeans(retailers_imputed[,c("vat","profit")])))
retailers_ball$df_proyec
colMeans(retailers_imputed[,c("vat","profit")])
retailers_ball  = dykstra_DF(retailers_imputed[,c("vat","profit")],
typeConstraints = "ball",
r = 1500,
centers =  t(colMeans(retailers_imputed[,c("vat","profit")])))
retailers_ball$df_proyec
head(retailers_ball$df_proyec)
head(retailers_ball$df_original)
colMeans(retailers_imputed[,c("vat","profit")])
sum(colMeans(retailers_imputed[,c("vat","profit")]))
mean(colMeans(retailers_imputed[,c("vat","profit")]))
retailers_ball  = dykstra_DF(retailers_imputed[,c("vat","profit")],
typeConstraints = "ball",
r = mean(colMeans(retailers_imputed[,c("vat","profit")])),
centers =  t(colMeans(retailers_imputed[,c("vat","profit")])))
View(retailers_ball)
View(retailers_ball[["df_final"]])
d_lineal$df_final[,"vat"]
meand_lineal$df_final[,"vat"])
mean(d_lineal$df_final[,"vat"])
retailers_imputed[,c("vat","profit")]
colMeans(retailers_imputed[,c("vat","profit")])
sum(colMeans(retailers_imputed[,c("vat","profit")]))
retailers_ball  = dykstra_DF(retailers_imputed[,c("vat","profit")],
typeConstraints = "ball",
r = sum(colMeans(retailers_imputed[,c("vat","profit")])),
centers =  t(colMeans(retailers_imputed[,c("vat","profit")])))
retailers_ball$df_final
View(retailers_ball)
View(retailers_ball[["df_check"]])
sum(colMeans(retailers_imputed[,c("vat","profit")]))
View(retailers_ball[["df_proyec"]])
View(retailers_ball)
View(retailers_ball[["df_final"]])
View(retailers_ball[["df_original"]])
View(retailers_ball[["df_proyec"]])
source('E:/4S/ProgramasGuillermo/retailersPrueba.R')
source('E:/4S/ProgramasGuillermo/DykstraSemiespacios.R')
source('E:/4S/ProgramasGuillermo/stopCriteria.R')
source('E:/4S/ProgramasGuillermo/DykstraSemiespacios.R')
source('E:/4S/ProgramasGuillermo/Dykstrabola.R')
source('E:/4S/ProgramasGuillermo/DykstraBolaSubespacios.R')
source('E:/4S/ProgramasGuillermo/pruebaPlot2D.R')
source('E:/4S/ProgramasGuillermo/pruebaPlot2D.R')
source('E:/4S/ProgramasGuillermo/pruebaPlot2D.R')
source('E:/4S/ProgramasGuillermo/DykstraProyecDF.R')
source('E:/4S/ProgramasGuillermo/retailersPrueba.R')
source('E:/4S/ProgramasGuillermo/retailersPrueba.R')
source('E:/4S/ProgramasGuillermo/retailersPrueba.R')
head(retailers_ball$df_final)
head(d3)
head(d3)
head(d_lineal$df_final)
head(d_lineal$df_final)
head(d4)
d4 <- match_restrictions(d2, v, adjust=is.na(d1))
library(validate)
library(simputation)
library(errorlocate)
library(rspa)
d4 <- match_restrictions(d2, v, adjust=is.na(d1))
headd4)
head(d4)
head(d_linealI$df_final)
head(d_linealI$df_final)
retailers_ball  = dykstra_DF(retailers_imputed[,c("vat","profit")],
typeConstraints = "ball",
r = sum(colMeans(retailers_imputed[,c("vat","profit")])),
centers =  t(colMeans(retailers_imputed[,c("vat","profit")])))
head(retailers_ball,10)
retailers_ball  = dykstra_DF(retailers_imputed[,c("vat","profit")],
typeConstraints = "ball",
r = mean(colMeans(retailers_imputed[,c("vat","profit")])),
centers =  t(colMeans(retailers_imputed[,c("vat","profit")])))
head(retailers_ball,10)
head(retailers_ball$df_final,10)
head(retailers_ball$df_original,10)
head(Ir)
retailers_ballI  = dykstra_DF(retailers_imputed[,c("vat","profit")],
typeConstraints = "ball",
r = mean(colMeans(retailers_imputed[,c("vat","profit")])),
centers =  t(colMeans(retailers_imputed[,c("vat","profit")])),
I =Ir[,c("vat","profit")])
head(retailers_ballI$df_final,10)
Ir[,c("vat","profit")]
head(retailers_ballI$df_original,10)
head(retailers_ballI$df_final,10)
source('G:/ProgramasGuillermo/stopCriteria.R')
source('G:/ProgramasGuillermo/DykstraSemiespacios.R')
source('G:/ProgramasGuillermo/Dykstrabola.R')
source('G:/ProgramasGuillermo/DykstraBolaSubespacios.R')
source('G:/ProgramasGuillermo/DykstraProyecDF.R')
source('G:/ProgramasGuillermo/retailersPrueba.R')
retailers_ball  = dykstra_DF(retailers_imputed[,c("vat","profit")],
typeConstraints = "ball",
r = mean(colMeans(retailers_imputed[,c("vat","profit")])),
centers =  t(colMeans(retailers_imputed[,c("vat","profit")])))
retailers_ballI  = dykstra_DF(retailers_imputed[,c("vat","profit")],
typeConstraints = "ball",
r = mean(colMeans(retailers_imputed[,c("vat","profit")])),
centers =  t(colMeans(retailers_imputed[,c("vat","profit")])),
I =Ir[,c("vat","profit")])
library(validate)
library(simputation)
library(errorlocate)
library(rspa)
# siguiendo la notación de Vanderloo
d1 <- replace_errors(retailers,v)
#miss <- is.na(d1)
# imputa los NA con un algoritmo de arbol de decisión
d2 <- impute_mf(d1, . ~ .)
d3 <- match_restrictions(d2, v)
d4 <- match_restrictions(d2, v, adjust=is.na(d1))
d_lineal = dykstra_DF(DF = d2[,-1],
typeConstraints = "lineal",
A = Ar[,-1],
b = br,
eq = eq)
d_linealI = dykstra_DF(DF = d2[,-1],
typeConstraints = "lineal",
A = Ar[,-1],
b = br,
eq = eq,
I = is.na(d1)[,-1])
#> head(retailers_lineal2,5)
#size incl.prob staff turnover    other.rev total.rev staff.costs total.costs     profit     vat
#1  sc0      0.02 75.00 1985.132 1.507917e+04 17064.301     12021.3    7967.150 9097.15048 3486.63
#2  sc3      0.14  9.00 1589.353 2.941280e+01  1618.765       131.0    1549.882   68.88240 1349.95
#3  sc3      0.14 22.64 6905.801 5.553284e-16  6905.799       324.0    6486.400  419.39950 5802.69
#4  sc3      0.14 18.87 3861.000 1.300000e+01  3874.000       290.0    3600.000  274.00000 3540.53
#5  sc3      0.14 20.73 5412.450 1.285298e+02  5540.980       314.0    5499.490   41.49006 4371.47
retailers_linealIRspa <- match_restrictions(retailers_imputed, v, adjust=Ir)
v <- validator(
staff >= 0
, turnover >= 0
, other.rev >= 0
, turnover + other.rev == total.rev
, total.rev - total.costs == profit
, total.costs >= 0
)
retailers_linealRspa <- match_restrictions(retailers_imputed, v)
retailers_linealI = dykstra_DF(DF = retailers_imputed[,-1],
typeConstraints = "lineal",
A = Ar[,-1],
b = br,
eq = eq,
I = Ir[,-1])
Ir = is.na(retailers)# DF de TRUE o FALSE indicando si el dato ha sido imputado(TRUE) o no
retailers_lineal = dykstra_DF(DF = retailers_imputed[,-1],
typeConstraints = "lineal",
A = Ar[,-1],
b = br,
eq = eq)
retailers_linealI = dykstra_DF(DF = retailers_imputed[,-1],
typeConstraints = "lineal",
A = Ar[,-1],
b = br,
eq = eq,
I = Ir[,-1])
View(retailers_linealI)
View(retailers_linealI[["df_final"]])
x0 =c(0,2.5)
r = c(2,1)
centers = matrix(c(2,0,0,0),nrow = 2, ncol = 2,byrow = TRUE)
library(plotrix)
plot(0,2.5, xlim = c(-0.5,3), ylim = c(-2,2.5), asp = 1,
xlab = expression('x'[1]),
ylab = expression('x'[2]))
draw.circle(0,0,1)
draw.circle(2,0,2)
M = length(r) ## nº de bolas(subconjuntos convexos = restricciones)
N = length(x0) ## dimension del vecotr a proyectar = nº de variables
E = matrix(rep(0,N*M),nrow = M, ncol = N)
for (n in 1:6) {
i = 1+(n-1)%%M
x0e = as.numeric(x0) + E[i,]
lines(c(x0[1],x0e[1]),c(x0[2],x0e[2]), col='blue')
x0e_prima = (x0e - centers[i,])/r[i]# reescalamos
x = P_ball(x0e_prima,W) # proyectamos sobre la "nueva" bola unidad (en el nuevo sist.)
x = x * r[i] + centers[i,]# recuperamos el sistema de coordenadas anterior
lines(c(x0e[1],x[1]),c(x0e[2],x[2]), col='red')
#lines(c(x0[1],x[1]),c(x0[2],x[2]), col='red')
e = as.numeric(x0) + E[i,] - x
E[i,] = e
x0 = x
#cat(x ,n, "\n")
print(e)
#print(error)
}
x0 =c(0,2.5)
r = c(2,1)
centers = matrix(c(2,0,0,0),nrow = 2, ncol = 2,byrow = TRUE)
library(plotrix)
plot(0,2.5, xlim = c(-0.5,3), ylim = c(0,2.5), asp = 1,
xlab = expression('x'[1]),
ylab = expression('x'[2]))
draw.circle(0,0,1)
draw.circle(2,0,2)
M = length(r) ## nº de bolas(subconjuntos convexos = restricciones)
N = length(x0) ## dimension del vecotr a proyectar = nº de variables
E = matrix(rep(0,N*M),nrow = M, ncol = N)
for (n in 1:6) {
i = 1+(n-1)%%M
x0e = as.numeric(x0) + E[i,]
lines(c(x0[1],x0e[1]),c(x0[2],x0e[2]), col='blue')
x0e_prima = (x0e - centers[i,])/r[i]# reescalamos
x = P_ball(x0e_prima,W) # proyectamos sobre la "nueva" bola unidad (en el nuevo sist.)
x = x * r[i] + centers[i,]# recuperamos el sistema de coordenadas anterior
lines(c(x0e[1],x[1]),c(x0e[2],x[2]), col='red')
#lines(c(x0[1],x[1]),c(x0[2],x[2]), col='red')
e = as.numeric(x0) + E[i,] - x
E[i,] = e
x0 = x
#cat(x ,n, "\n")
print(e)
#print(error)
}
x0 =c(0,2.5)
r = c(2,1)
centers = matrix(c(2,0,0,0),nrow = 2, ncol = 2,byrow = TRUE)
library(plotrix)
plot(0,2.5, xlim = c(-0.5,3), ylim = c(0,1.5), asp = 1,
xlab = expression('x'[1]),
ylab = expression('x'[2]))
draw.circle(0,0,1)
draw.circle(2,0,2)
M = length(r) ## nº de bolas(subconjuntos convexos = restricciones)
N = length(x0) ## dimension del vecotr a proyectar = nº de variables
E = matrix(rep(0,N*M),nrow = M, ncol = N)
for (n in 1:6) {
i = 1+(n-1)%%M
x0e = as.numeric(x0) + E[i,]
lines(c(x0[1],x0e[1]),c(x0[2],x0e[2]), col='blue')
x0e_prima = (x0e - centers[i,])/r[i]# reescalamos
x = P_ball(x0e_prima,W) # proyectamos sobre la "nueva" bola unidad (en el nuevo sist.)
x = x * r[i] + centers[i,]# recuperamos el sistema de coordenadas anterior
lines(c(x0e[1],x[1]),c(x0e[2],x[2]), col='red')
#lines(c(x0[1],x[1]),c(x0[2],x[2]), col='red')
e = as.numeric(x0) + E[i,] - x
E[i,] = e
x0 = x
#cat(x ,n, "\n")
print(e)
#print(error)
}
x0 =c(0,2.5)
r = c(2,1)
centers = matrix(c(2,0,0,0),nrow = 2, ncol = 2,byrow = TRUE)
library(plotrix)
plot(0,2.5, xlim = c(-0.5,2), ylim = c(0,1.5), asp = 1,
xlab = expression('x'[1]),
ylab = expression('x'[2]))
draw.circle(0,0,1)
draw.circle(2,0,2)
M = length(r) ## nº de bolas(subconjuntos convexos = restricciones)
N = length(x0) ## dimension del vecotr a proyectar = nº de variables
E = matrix(rep(0,N*M),nrow = M, ncol = N)
for (n in 1:6) {
i = 1+(n-1)%%M
x0e = as.numeric(x0) + E[i,]
lines(c(x0[1],x0e[1]),c(x0[2],x0e[2]), col='blue')
x0e_prima = (x0e - centers[i,])/r[i]# reescalamos
x = P_ball(x0e_prima,W) # proyectamos sobre la "nueva" bola unidad (en el nuevo sist.)
x = x * r[i] + centers[i,]# recuperamos el sistema de coordenadas anterior
lines(c(x0e[1],x[1]),c(x0e[2],x[2]), col='red')
#lines(c(x0[1],x[1]),c(x0[2],x[2]), col='red')
e = as.numeric(x0) + E[i,] - x
E[i,] = e
x0 = x
#cat(x ,n, "\n")
print(e)
#print(error)
}
A
x
Ac= matrix(c(1,2,3,1))
Ac
Ac= matrix(c(1,2,3,1),nrow = 2)
Ac
